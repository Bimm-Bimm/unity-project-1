#pragma kernel GenerateNoise

#include "Includes\FastNoiseLite.hlsl"

static const uint numThreads = 8;
int _ChunkScale;
int _ChunkSize;
RWStructuredBuffer<float> _Weights;
float _Amplitude;
float _Frequency;
int _Octaves;
float _GroundPercent;
float3 _Origin;
int indexFromCoord(int x, int y, int z)
{
    return x + _ChunkSize * (y + _ChunkSize * z);
}
[numthreads(numThreads, numThreads, numThreads )]
void GenerateNoise(uint3 id : SV_DispatchThreadID)
{
    fnl_state noise = fnlCreateState();
    noise.noise_type = FNL_NOISE_OPENSIMPLEX2;
    noise.fractal_type = FNL_FRACTAL_RIDGED;
    noise.frequency = _Frequency;
    noise.octaves = _Octaves;
    float3 pos = id * _ChunkScale + _Origin;
    float ground = -pos.y + (_GroundPercent * _ChunkSize);
    float n = ground + fnlGetNoise3D(noise, pos.x, pos.y, pos.z) * _Amplitude;
    _Weights[indexFromCoord(id.x, id.y, id.z)] = n;
}
